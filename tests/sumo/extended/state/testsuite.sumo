# save2 test using the deprecated list delimiter ';'
save2_deprecated_delimiter

# save 2 states
save2

# save 2 states with human readable times
save2_H

# state saving times are not reached
save2_mismatch

# save multiple states
save_at_interval

# saving interval does not match step-length
save_at_interval_mismatch

# save multiple states with human-readable times (no colons)
save_at_interval_H

# save multiple states with human-readable times (no colons)
save_default_names_H

# the input is taken from test save2/state2.sumo
load

# the input is taken from test save2/state2.sumo and --scale is set
load_scaled

# the input is taken from test save2/state2.sumo
# 1 vehicle is removed while loading
load_remove

# the input is taken from test save2/state.sumo
load_late_insertion

# the input is taken from test save2/state.sumo
load_and_save

# the input is taken from test save2/state.sumo	
# 
# load the route file again but with option -a
load_routes_as_additional

# save 2 states
save_actionStepLength

# the input is taken from test save2/state.sumo
load_and_save_actionStepLength

# save 2 states
save_actionStepLength2

# the input is taken from test save2/state.sumo
load_and_save_actionStepLength2

# save state for a network with internal links
save_with_internal_links

# save loaded flow
save_flow

# the input is taken from test save_flow/state.sumo
load_flow

# save in a network with taz
save_taz

# save in a network with taz which has an invalid route
save_taz_route_invalid

# save a parking vehicle
save_parking

# the input is taken from test save/save_parking/state.sumo
load_parking

# save vehicle parking at busStop
save_parking_busStop

# the input is taken from test save/save_parking_busStop/state.sumo
load_parking_busStop

# save a stopped vehicle
save_stopped

# the input is taken from test save/save_stopped/state.sumo
load_stopped

# save a vehicle stooped due to collision
save_collision_stopped

# the input is taken from test save_collision_stopped/state.sumo
load_collision_stopped

# load a vehicle that arrives in the first step (see #2938)
# the input is regenerated by running saveState.sumocfg
load_arriving

# load vehicles that depart in the future (added to the insertion queue via additional file) and test whether the option --load-state.offset works.
# the input is regenerated by running saveState.sumocfg
load_shifted

# save routeProbe data as part of state
save_routeProbe

# save vehicle in the middle of cyclic route with stops
save_cyclic_stops

# load state with cyclic stops
load_cyclic_stops
save_routeDistribution

# the input is taken from test save/save_routeDistribution/state.sumo
load_routeDistribution

# save state including rng
save_rng

# load state including rng
load_rng

# save state of a railway simulation
save_rail_signal

# load state of a railway simulation
load_rail_signal

# save state of a railway simulation
save_on_rail_signal

# load state of a railway simulation
load_on_rail_signal

# save state of a railway simulation including constraint tracking
save_rail_signal_constraint

# load state of a railway simulation including constraint tracking
load_rail_signal_constraint
